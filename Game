@Data
@AllArgsConstructor
@NoArgsConstructor
public abstract class AbstractGame implements Game {
    Integer sizeWord;
    String word;
    Integer maxTry;
    GameStatus gameStatus = GameStatus.INIT;

    private String generateWord() {
        SecureRandom random = new SecureRandom();
        String res = "";
        for (int i = 0; i < sizeWord; i++) {
            res += random.nextInt(10);
        }
        return res;
    }

    @Override
    public void start(Integer sizeWord, Integer maxTry) {
        this.maxTry = maxTry;
        this.sizeWord = sizeWord;
        word = generateWord();
        this.gameStatus = GameStatus.START;
    }

    @Override
    public Answer inputAnswer(String value) {
        int bull = 0;
        int cow = 0;
        for (int i = 0; i < value.length(); i++) {
            if (word.contains(Character.toString(value.charAt(i)))) {
                cow++;
            }
            if (word.charAt(i)==value.charAt(i)){
                bull++;
            }
        }
        Answ
public interface Game {
    void start( Integer sizeWord, Integer maxTry);
    Answer inputAnswer(String value);
}





public enum GameStatus {
    INIT,START,FINISH,OFF
}



public enum GameStatus {
public class NumberGame extends AbstractGame{

    @Override
    public Answer inputAnswer(String value) {
        return null;
    }
}







@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class Answer {
    private Integer cows;
    private Integer bulls;
    private Integer countTry;
    private String userInput;
}
